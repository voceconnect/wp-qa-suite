#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

##
# CONSTANTS
##
readonly PROJECT_ROOT="${PWD}"
readonly WPQA_SCRIPT_DIR="$( cd "$( dirname "$0" )" && pwd )"
readonly WP_TESTS_DIR="/tmp/wordpress-tests-lib"
readonly WP_CORE_DIR="/tmp/wordpress"

#######################################
# validates and sets constants based
# on provided arguments
# Globals:
#   WP_ARCHIVE
#   DB_USER
#   DB_PASS
#   DB_NAME
#   DB_HOST
# Arguments:
#   $1 - wp_version
#   $2 - DB_USER
#   $3 - DB_PASS
#   $4 - DB_NAME
#   $5 - DB_HOST
# Returns:
#   Nothing
#######################################
function check_arguments() {
  local wp_version=${1:-}
  if [[ -z "${wp_version}" ]]; then
    echo "usage: $0 <wp_version> [DB_USER=travis] [DB_PASS=] [DB_NAME=wp_test] [DB_HOST=localhost]"
    exit 1
  else
    if [[ "${wp_version}" == "latest" ]]; then
      readonly WP_ARCHIVE="latest"
    else
      readonly WP_ARCHIVE="wordpress-${wp_version}"
    fi
  fi

  readonly DB_USER="${2:-travis}"
  readonly DB_PASS="${3:-}"
  readonly DB_NAME="${4:-wp_test}"
  readonly DB_HOST="${5:-localhost}"
}

#######################################
# retrieves latest or specified version
# of wordpress into WP_CORE_DIR
# Globals:
#   WP_CORE_DIR
#   WP_ARCHIVE
# Arguments:
#   None
# Returns:
#   Nothing
#######################################
function install_wordpress() {
  mkdir -p "${WP_CORE_DIR}"

  wget -nv -O "/tmp/wordpress.tar.gz" \
    "http://wordpress.org/${WP_ARCHIVE}.tar.gz"
  tar --strip-components=1 -zxmf "/tmp/wordpress.tar.gz" -C "${WP_CORE_DIR}"
}

#######################################
# setup of wordpress unit test
# includes and configuration
# Globals:
#   WP_TESTS_DIR
#   WP_CORE_DIR
#   DB_NAME
#   DB_USER
#   DB_PASS
#   DB_HOST
# Arguments:
#   None
# Returns:
#   Nothing
#######################################
function install_test_suite() {
  if [[ $(uname -s) == 'Darwin' ]]; then
    local ioption='-i ""'
  else
    local ioption='-i'
  fi

  mkdir -p "${WP_TESTS_DIR}"
  (
    cd "${WP_TESTS_DIR}"
    svn co --quiet http://develop.svn.wordpress.org/trunk/tests/phpunit/includes/

    wget -nv -O wp-tests-config.php \
      http://develop.svn.wordpress.org/trunk/wp-tests-config-sample.php
    sed $ioption "s:dirname( __FILE__ ) . '/src/':'${WP_CORE_DIR}/':" \
      wp-tests-config.php
    sed $ioption "s/youremptytestdbnamehere/${DB_NAME}/" wp-tests-config.php
    sed $ioption "s/yourusernamehere/${DB_USER}/" wp-tests-config.php
    sed $ioption "s/yourpasswordhere/${DB_PASS}/" wp-tests-config.php
    sed $ioption "s|localhost|${DB_HOST}|" wp-tests-config.php
  )
}

#######################################
# creates DB_NAME database for tests
# Globals:
#   DB_NAME
#   DB_USER
#   DB_PASS
#   DB_HOST
# Arguments:
#   None
# Returns:
#   Nothing
#######################################
function setup_database() {
  mysql -e "DROP DATABASE IF EXISTS ${DB_NAME};" \
    --user="${DB_USER}" \
    --pass="${DB_PASS}" \
    --host="${DB_HOST}"
  mysql -e "CREATE DATABASE IF NOT EXISTS ${DB_NAME};" \
    --user="${DB_USER}" \
    --pass="${DB_PASS}" \
    --host="${DB_HOST}"
}

#######################################
# executes phpunit tests only when a
# phpunit.xml file is present
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   Nothing
#######################################
function execute_phpunit_tests() {
  echo "executing PHP unit tests..."
  phpunit --configuration phpunit.xml
}

#######################################
# setup test environment to run PHP
# unit tests with required wordpress
# testing libraries and configs
#######################################
function main() {
  check_arguments "$@"

  if [[ -e "phpunit.xml" ]]; then
    install_wordpress
    install_test_suite
    setup_database
    execute_phpunit_tests
  else
    echo "missing phpunit.xml file, exiting..."
    exit 1
  fi
}

main "$@"
